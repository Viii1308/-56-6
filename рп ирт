{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 13. Метод Ньютона\n",
    "*Метод Ньютона* нахождения корня уравнения $f(x) = 0$ заключается в итерациях вида\n",
    "$$\n",
    "x_{i+1} = x_i - \\frac{f(x_i)}{f'(x_i)}.\n",
    "$$\n",
    "Написать функцию `mynewton(f, df, [x0, x1])`, реализующую метод Ньютона,\n",
    "где \n",
    "`f` – строка, задающая правую часть $f(x)$ уравнения,\n",
    "`df` – строка, задающая  $f'(x)$,\n",
    "`[x0, x1]` – отрезок локализации.\n",
    "Функция должна возвращать найденный корень с макимально возможной точностью.\n",
    "\n",
    "Написать программу, тестирующую эту\n",
    "функцию и сравнивающую ее с `scipy.optimize.newton`, `scipy.optimize.fsolve` на уравнениях:\n",
    "$$\n",
    "x^3 - 2x - 5 = 0, \\qquad 0\\le x \\le 3\n",
    "$$\n",
    "(исторический пример Валлиса),\n",
    "$$\n",
    "\\sin x = 0, \\qquad 1 \\le x \\le 4,\n",
    "$$\n",
    "$$\n",
    "x^3  = 0.001, \\qquad -1 \\le x \\le 1,\n",
    "$$\n",
    "$$\n",
    "\\ln x + \\frac{2}{3} = 0, \\qquad 0 \\le x \\le 1,\n",
    "$$\n",
    "$$\n",
    "\\mathop{\\rm sgn} (x-2)\\, \\sqrt{|x-2|} = 0, \\qquad 1 \\le x \\le 4,\n",
    "$$\n",
    "$$\n",
    " \\arctan x = \\frac{\\pi}{3}, \\qquad 0 \\le x \\le 5,\n",
    "$$\n",
    "$$\n",
    "\\frac{1}{x - \\pi} = 0, \\qquad 0 \\le x \\le 5.\n",
    "$$\n",
    "Программа должна печатать таблицу, в которой указываются найденные функциями `mynewton`,\n",
    "`scipy.optimize.newton`, `scipy.optimize.fsolve` решения, их относительные ошибки, и количества затраченных итераций.\n",
    "Сравнить и следать выводы."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Для начала импортируем необходимые библиотеки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1420,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import optimize"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Реализуем функции и их производные:\n",
    "$$\n",
    "x^3 - 2x - 5 = 0, \\qquad 0\\le x \\le 3\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1421,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f1(x):\n",
    "    return x**3 - 2*x - 5\n",
    "def df1(x):\n",
    "    return 3*x**2-2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "\\sin x = 0, \\qquad 1 \\le x \\le 4,\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1422,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f2(x):\n",
    "    return np.sin(x)\n",
    "def df2(x):\n",
    "    return np.cos(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "x^3  = 0.001, \\qquad -1 \\le x \\le 1,\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1423,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f3(x):\n",
    "    return x**3 - 0.001\n",
    "def df3(x):\n",
    "    return 3*x**2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "\\ln x + \\frac{2}{3} = 0, \\qquad 0 \\le x \\le 1,\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1424,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f4(x):\n",
    "    return np.log(x) + 2/3.0\n",
    "def df4(x):\n",
    "    return 1.0/x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "\\mathop{\\rm sgn} (x-2)\\, \\sqrt{|x-2|} = 0, \\qquad 1 \\le x \\le 4,\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1425,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f5(x):\n",
    "    return np.sign(x-2) * np.sqrt(abs(x-2))\n",
    "def df5(x):\n",
    "    return ((-2 + x)* np.sign(-2 + x))/(2*abs(-2 + x)**(3/2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    " \\arctan x = \\frac{\\pi}{3}, \\qquad 0 \\le x \\le 5,\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1426,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f6(x):\n",
    "    return np.arctan(x)-np.pi/3\n",
    "def df6(x):\n",
    "    return 1.0/(x**2+1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "\\frac{1}{x - \\pi} = 0, \\qquad 0 \\le x \\le 5.\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1427,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f7(x):\n",
    "    return 1/(x-np.pi)\n",
    "def df7(x):\n",
    "    return -1/((x-np.pi)**2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Отрисуем графики данных функций с их производными.\n",
    "Для начала зададим линейные пространства точек"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1428,
   "metadata": {},
   "outputs": [],
   "source": [
    "L_f1 = np.linspace(0, 3, 100)\n",
    "L_f2 = np.linspace(1, 4, 100)\n",
    "L_f3 = np.linspace(-1, 1, 100)\n",
    "L_f4 = np.linspace(0.01, 1.000001, 100)\n",
    "L_f5 = np.linspace(1, 4, 100001)\n",
    "L_f6 = np.linspace(0, 5, 100)\n",
    "L_f7 = np.linspace(0, 5, 1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Настраиваем оси и выводим:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1429,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x1440 with 14 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(7, 2, figsize=(16,20))\n",
    "axs[0, 0].plot(L_f1, f1(L_f1))\n",
    "axs[0, 0].set_title('1) x^3-2x-5', fontsize=14)\n",
    "axs[0, 1].plot(L_f1, df1(L_f1))\n",
    "axs[0, 1].set_title('1) 3x^2-2', fontsize=14)\n",
    "\n",
    "axs[1,0].plot(L_f2,f2(L_f2))\n",
    "axs[1, 0].set_title('2) sin(x)', fontsize=14)\n",
    "axs[1,1].plot(L_f2,df2(L_f2))\n",
    "axs[1, 1].set_title('2) cos(x)', fontsize=14)\n",
    "\n",
    "axs[2,0].plot(L_f3,f3(L_f3))\n",
    "axs[2, 0].set_title('3) x^3  - 0.001', fontsize=14)\n",
    "axs[2,1].plot(L_f3,df3(L_f3))\n",
    "axs[2, 1].set_title('3) 3x^2', fontsize=14)\n",
    "\n",
    "axs[3,0].plot(L_f4,f4(L_f4))\n",
    "axs[3, 0].set_title('4) ln(x)+2/3', fontsize=14)\n",
    "axs[3,1].plot(L_f4,df4(L_f4))\n",
    "axs[3, 1].set_title('4) 1/x', fontsize=14)\n",
    "\n",
    "axs[4,0].plot(L_f5,f5(L_f5))\n",
    "axs[4, 0].set_title('5) sgn(x-2) * sqrt(abs(x-2))', fontsize=14)\n",
    "axs[4,1].plot(L_f5,df5(L_f5))\n",
    "axs[4, 1].set_title('5) ((-2 + x)* sgn(-2 + x))/(2*abs(-2 + x)**(3/2))', fontsize=14)\n",
    "\n",
    "axs[5,0].plot(L_f6,f6(L_f6))\n",
    "axs[5, 0].set_title('6) arctan(x)-pi/3', fontsize=14)\n",
    "axs[5,1].plot(L_f6,df6(L_f6))\n",
    "axs[5, 1].set_title('6) 1/(x^2+1)', fontsize=14)\n",
    "\n",
    "axs[6,0].plot(L_f7,f7(L_f7))\n",
    "axs[6, 0].set_title('7) 1/(x-pi)', fontsize=14)\n",
    "axs[6,1].plot(L_f7,df7(L_f7))\n",
    "axs[6, 1].set_title('7) -1/(x-pi)^2', fontsize=14)\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Реализация функции\n",
    "\n",
    "`f` – строка, задающая $f(x)$,\n",
    "`df` – строка, задающая  $f'(x)$,\n",
    "`[x0, x1]` – отрезок локализации, `e` - необходимая точность."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1430,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = []\n",
    "def mynewton(f, df, x0, x1, e):\n",
    "    iterations = 0\n",
    "    deltax = (x1+x0)/2; # Значение, от которого начинаем поиск - середина отрезка локализации\n",
    "    if (deltax == 0):\n",
    "        deltax = x0\n",
    "    delta = abs(0-f(deltax))\n",
    "    while delta > e:\n",
    "        try:\n",
    "            deltax = deltax - f(deltax)/df(deltax)\n",
    "            delta = abs(0-f(deltax))\n",
    "            iterations += 1\n",
    "            if (deltax < x0 or deltax > x1): # При уходе за границы отрезка локализации, выходим из функции\n",
    "                                             # с соответствующим предупреждением\n",
    "                print('There is no answer on line segment [x0,x1] or e for current line segment is too small')\n",
    "                return deltax, f(deltax), -1\n",
    "            if (iterations >= 100000): # При количестве итераций >= 100000 выходим\n",
    "                print('Runtime Error e is too small or accuracy of float is not enough')\n",
    "                return \"err\" \"err\" \"err\"\n",
    "        except ZeroDivisionError: # Если во время вычислений появляется деление на ноль, сдвигаем x. Данный случай маловероятен, но исключать его не стоит\n",
    "            deltax = deltax + 0.01\n",
    "    print ('X: ', deltax) # Если все хорошо, выводим полученные результаты\n",
    "    print ('f(X): ', f(deltax))\n",
    "    print ('Iterations:', iterations)\n",
    "    return deltax, f(deltax), iterations\n",
    "\n",
    "def eserror(res, e):\n",
    "    return abs(res)/e*100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Начинаем исследовать функции, сохраняя при этом ответы:\n",
    "\n",
    "# 1 функция:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1431,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Runtime Error e is too small or accuracy of float is not enough\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'errerrerr'"
      ]
     },
     "execution_count": 1431,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mynewton(f1,df1,0,3,1e-18)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Превышено количество итераций, увеличиваем e, пока не получим ответ:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1432,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X:  2.0945514815423265\n",
      "f(X):  -8.881784197001252e-16\n",
      "Iterations: 6\n",
      "[['f1_mynewt', 2.0945514815423265, -8.881784197001252e-16, 6, 1e-15, 88.81784197001251]]\n"
     ]
    }
   ],
   "source": [
    "x, fx, it = mynewton(f1,df1,0,3,1e-15)\n",
    "results.append([])\n",
    "results[0].append([])\n",
    "results[0][0].append(\"f1_mynewt\")\n",
    "results[0][0].append(x)\n",
    "results[0][0].append(fx)\n",
    "results[0][0].append(it)\n",
    "results[0][0].append(1e-15)\n",
    "results[0][0].append(eserror(results[0][0][2], results[0][0][4]))\n",
    "print(results[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "То же повторяем с другими функциями:\n",
    "\n",
    "# 2 функция:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1433,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X:  3.141592653589793\n",
      "f(X):  1.2246467991473532e-16\n",
      "Iterations: 4\n"
     ]
    }
   ],
   "source": [
    "x, fx, it = mynewton(f2,df2,1,4,1e-15)\n",
    "results.append([])\n",
    "results[1].append([])\n",
    "results[1][0].append(\"f2_mynewt\")\n",
    "results[1][0].append(x)\n",
    "results[1][0].append(fx)\n",
    "results[1][0].append(it)\n",
    "results[1][0].append(1e-15)\n",
    "results[1][0].append(eserror(results[1][0][2], results[1][0][4]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3 функция:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1434,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X:  0.1\n",
      "f(X):  2.168404344971009e-19\n",
      "Iterations: 13\n"
     ]
    }
   ],
   "source": [
    "x, fx, it = mynewton(f3,df3,-1,1,1e-18)\n",
    "results.append([])\n",
    "results[2].append([])\n",
    "results[2][0].append(\"f3_mynewt\")\n",
    "results[2][0].append(x)\n",
    "results[2][0].append(fx)\n",
    "results[2][0].append(it)\n",
    "results[2][0].append(1e-18)\n",
    "results[2][0].append(eserror(results[2][0][2], results[2][0][4]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4 функция:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1435,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X:  0.5134171190325911\n",
      "f(X):  -1.7763568394002505e-15\n",
      "Iterations: 3\n"
     ]
    }
   ],
   "source": [
    "x, fx, it = mynewton(f4,df4,0,1,1e-14)\n",
    "results.append([])\n",
    "results[3].append([])\n",
    "results[3][0].append(\"f4_mynewt\")\n",
    "results[3][0].append(x)\n",
    "results[3][0].append(fx)\n",
    "results[3][0].append(it)\n",
    "results[3][0].append(1e-14)\n",
    "results[3][0].append(eserror(results[3][0][2], results[3][0][4]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5 функция:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1436,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Runtime Error e is too small or accuracy of float is not enough\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'errerrerr'"
      ]
     },
     "execution_count": 1436,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mynewton(f5,df5,1,4,0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Замечаем, что функция выводит Runtime Error при очень большом e. Пробуем увеличить e до тех пор, пока не получим хотя бы какие-нибудь результаты"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1437,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X:  2.5\n",
      "f(X):  0.7071067811865476\n",
      "Iterations: 0\n"
     ]
    }
   ],
   "source": [
    "x, fx, it = mynewton(f5,df5,1,4,0.8)\n",
    "results.append([])\n",
    "results[4].append([])\n",
    "results[4][0].append(\"f5_mynewt\")\n",
    "results[4][0].append(x)\n",
    "results[4][0].append(fx)\n",
    "results[4][0].append(it)\n",
    "results[4][0].append(0.8)\n",
    "results[4][0].append(eserror(results[4][0][2], results[4][0][4]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Замечаем, что количество итераций равно нулю. Это значит, что функция ни разу не проработала. Как так? Дело в том, что производная в предполагаемой точке ответа стремится к плюс бесконечности. И если посмотрим на формулу \n",
    "$$\n",
    "x_{i+1} = x_i - \\frac{f(x_i)}{f'(x_i)}.\n",
    "$$\n",
    "то заметим, что это будет означать, что мы вычитаем бесконечно малые числа. Точности чисел с плавающей точкой не хватает, float - беск. мал. число = тот же float, программа зацикливается.\n",
    "\n",
    "Вывод - метод крайне неэффективен, когда производная в точке ответа стремится к бесконечности"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6 функция:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1438,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X:  1.732050807568875\n",
      "f(X):  -4.440892098500626e-16\n",
      "Iterations: 5\n"
     ]
    }
   ],
   "source": [
    "x, fx, it = mynewton(f6,df6,0,5,1e-15)\n",
    "results.append([])\n",
    "results[5].append([])\n",
    "results[5][0].append(\"f6_mynewt\")\n",
    "results[5][0].append(x)\n",
    "results[5][0].append(fx)\n",
    "results[5][0].append(it)\n",
    "results[5][0].append(1e-15)\n",
    "results[5][0].append(eserror(results[5][0][2], results[5][0][4]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 7 функция:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1439,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is no answer on line segment [x0,x1] or e for current line segment is too small\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(-1.9911485751285518, -0.19482766721315928, -1)"
      ]
     },
     "execution_count": 1439,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mynewton(f7,df7,0,5,1e-12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Замечаем, что при данной точности ответ не находится на границах отрезка локализации. Увеличиваем e, пока не получим ответ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1440,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X:  0.5752220392306207\n",
      "f(X):  -0.38965533442631856\n",
      "Iterations: 2\n"
     ]
    }
   ],
   "source": [
    "x, fx, it = mynewton(f7,df7,0,5,0.389655335)\n",
    "results.append([])\n",
    "results[6].append([])\n",
    "results[6][0].append(\"f7_mynewt\")\n",
    "results[6][0].append(x)\n",
    "results[6][0].append(fx)\n",
    "results[6][0].append(it)\n",
    "results[6][0].append(0.389655335)\n",
    "results[6][0].append(eserror(results[6][0][2], results[6][0][4]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Получаем, что ближайшиий ответ, получаемый данным методом на данном отрезке локализации равен 0.5752220392306207, однако при этом значение функции равно -0.38965533442631856, что очень далеко от ответа"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Далее начинаем эксперементировать с функциями scipy, постепенно заполняя таблицу для обработки результатов\n",
    "\n",
    "# 1 функция"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1441,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f1_opt_newt 2.0945514815423265 -8.881784197001252e-16 7 1e-15 88.81784197001251\n"
     ]
    }
   ],
   "source": [
    "of = optimize.newton(f1, 1.5, fprime = df1, tol=1e-15, maxiter=7)\n",
    "results[0].append([])\n",
    "results[0][1].append(\"f1_opt_newt\")\n",
    "results[0][1].append(of)\n",
    "results[0][1].append(f1(of))\n",
    "results[0][1].append(7)\n",
    "results[0][1].append(1e-15)\n",
    "results[0][1].append(eserror(results[0][1][2], results[0][1][4]))\n",
    "print(*results[0][1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Получаем, что при равных условиях функции выводят одни и те же значения\n",
    "\n",
    "Теперь пробуем optimize.fsolve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1442,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f1_opt_fsol 2.0945519788901694 5.551118531066379e-06 7 1e-15 555111853106.6378 RuntimeWarning\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\Anaconda\\lib\\site-packages\\scipy\\optimize\\minpack.py:162: RuntimeWarning: The number of calls to function has reached maxfev = 7.\n",
      "  warnings.warn(msg, RuntimeWarning)\n"
     ]
    }
   ],
   "source": [
    "of = optimize.fsolve(f1,1.5, fprime = df1, xtol = 1e-15, maxfev = 7)\n",
    "results[0].append([])\n",
    "results[0][2].append(\"f1_opt_fsol\")\n",
    "results[0][2].append(of[0])\n",
    "results[0][2].append(f1(of[0]))\n",
    "results[0][2].append(7)\n",
    "results[0][2].append(1e-15)\n",
    "results[0][2].append(eserror(results[0][2][2], results[0][2][4]))\n",
    "results[0][2].append(\"RuntimeWarning\")\n",
    "print(*results[0][2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видим, что точности при количестве итераций < 7 не хватает. Убираем ограничение по количеству итераций"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1443,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f1_opt_fsol 2.0945514815423265 -8.881784197001252e-16 max 1e-15 88.81784197001251\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\Anaconda\\lib\\site-packages\\scipy\\optimize\\minpack.py:162: RuntimeWarning: The iteration is not making good progress, as measured by the \n",
      "  improvement from the last ten iterations.\n",
      "  warnings.warn(msg, RuntimeWarning)\n"
     ]
    }
   ],
   "source": [
    "of = optimize.fsolve(f1, 1.5, fprime = df1, xtol = 1e-15)\n",
    "results[0].append([])\n",
    "results[0][3].append(\"f1_opt_fsol\")\n",
    "results[0][3].append(of[0])\n",
    "results[0][3].append(f1(of[0]))\n",
    "results[0][3].append(\"max\")\n",
    "results[0][3].append(1e-15)\n",
    "results[0][3].append(eserror(results[0][3][2], results[0][3][4]))\n",
    "print(*results[0][3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2 функция"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1444,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f2_opt_newt 3.141592653589793 1.2246467991473532e-16 5 1e-15 12.24646799147353\n"
     ]
    }
   ],
   "source": [
    "of = optimize.newton(f2, 2.5, fprime = df2, tol=1e-15, maxiter=5)\n",
    "results[1].append([])\n",
    "results[1][1].append(\"f2_opt_newt\")\n",
    "results[1][1].append(of)\n",
    "results[1][1].append(f2(of))\n",
    "results[1][1].append(5)\n",
    "results[1][1].append(1e-15)\n",
    "results[1][1].append(eserror(results[1][1][2], results[1][1][4]))\n",
    "print(*results[1][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1445,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f2_opt_fsol 3.141592653517837 7.195634122589542e-11 5 1e-15 7195634.122589541 RuntimeWarning\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\Anaconda\\lib\\site-packages\\scipy\\optimize\\minpack.py:162: RuntimeWarning: The number of calls to function has reached maxfev = 5.\n",
      "  warnings.warn(msg, RuntimeWarning)\n"
     ]
    }
   ],
   "source": [
    "of = optimize.fsolve(f2,2.5, fprime = df2, xtol = 1e-15, maxfev = 5)\n",
    "results[1].append([])\n",
    "results[1][2].append(\"f2_opt_fsol\")\n",
    "results[1][2].append(of[0])\n",
    "results[1][2].append(f2(of[0]))\n",
    "results[1][2].append(5)\n",
    "results[1][2].append(1e-15)\n",
    "results[1][2].append(eserror(results[1][2][2], results[1][2][4]))\n",
    "results[1][2].append(\"RuntimeWarning\")\n",
    "print(*results[1][2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1446,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f2_opt_fsol 3.141592653589793 1.2246467991473532e-16 max 1e-15 12.24646799147353\n"
     ]
    }
   ],
   "source": [
    "of = optimize.fsolve(f2,2.5, fprime = df2, xtol = 1e-15)\n",
    "results[1].append([])\n",
    "results[1][3].append(\"f2_opt_fsol\")\n",
    "results[1][3].append(of[0])\n",
    "results[1][3].append(f2(of[0]))\n",
    "results[1][3].append(\"max\")\n",
    "results[1][3].append(1e-15)\n",
    "results[1][3].append(eserror(results[1][3][2], results[1][3][4]))\n",
    "print(*results[1][3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3 функция"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1447,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RuntimeError\n",
      "f3_opt_newt err err 10 1e-18 err\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    of = optimize.newton(f3, -1, fprime = df3, tol=1e-18, maxiter=14)\n",
    "except RuntimeError:\n",
    "    print(\"RuntimeError\")\n",
    "    results[2].append([])\n",
    "    results[2][1].append(\"f3_opt_newt\")\n",
    "    results[2][1].append(\"err\")\n",
    "    results[2][1].append(\"err\")\n",
    "    results[2][1].append(10)\n",
    "    results[2][1].append(1e-18)\n",
    "    results[2][1].append(\"err\")\n",
    "    print(*results[2][1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9 итераций не хватило. Меняем на максимальное количество"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1448,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RuntimeError\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    of = optimize.newton(f3, -1, fprime = df3, tol=1e-18)\n",
    "    of\n",
    "except RuntimeError:\n",
    "    print(\"RuntimeError\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Причина оказалась в том, что точность поставлена слишком маленькая. Увеличиваем допустимый порог"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1449,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.09999999999999999"
      ]
     },
     "execution_count": 1449,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "of = optimize.newton(f3, -1, fprime = df3, tol=1e-16)\n",
    "of"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пробуем снова поставить порог по итерациям в 14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1450,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f3_opt_newt 0.09999999999999999 -2.168404344971009e-19 14 1e-16 0.2168404344971009\n"
     ]
    }
   ],
   "source": [
    "of = optimize.newton(f3, -1, fprime = df3, tol=1e-16, maxiter=14)\n",
    "results[2].append([])\n",
    "results[2][2].append(\"f3_opt_newt\")\n",
    "results[2][2].append(of)\n",
    "results[2][2].append(f3(of))\n",
    "results[2][2].append(14)\n",
    "results[2][2].append(1e-16)\n",
    "results[2][2].append(eserror(results[2][2][2], results[2][2][4]))\n",
    "print(*results[2][2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1451,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f3_opt_fsol 0.051718477053988535 -0.0008616633726438093 14 1e-18 8.616633726438093e+16 RuntimeWarning\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\Anaconda\\lib\\site-packages\\scipy\\optimize\\minpack.py:162: RuntimeWarning: The number of calls to function has reached maxfev = 14.\n",
      "  warnings.warn(msg, RuntimeWarning)\n"
     ]
    }
   ],
   "source": [
    "of = optimize.fsolve(f3,-1 , fprime = df3, xtol = 1e-18, maxfev = 14)\n",
    "results[2].append([])\n",
    "results[2][3].append(\"f3_opt_fsol\")\n",
    "results[2][3].append(of[0])\n",
    "results[2][3].append(f3(of[0]))\n",
    "results[2][3].append(14)\n",
    "results[2][3].append(1e-18)\n",
    "results[2][3].append(eserror(results[2][3][2], results[2][3][4]))\n",
    "results[2][3].append(\"RuntimeWarning\")\n",
    "print(*results[2][3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1452,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f3_opt_fsol 0.09999999999999999 -2.168404344971009e-19 max 1e-18 21.684043449710085\n"
     ]
    }
   ],
   "source": [
    "of = optimize.fsolve(f3,-1 , fprime = df3, xtol = 1e-18)\n",
    "results[2].append([])\n",
    "results[2][4].append(\"f3_opt_fsol\")\n",
    "results[2][4].append(of[0])\n",
    "results[2][4].append(f3(of[0]))\n",
    "results[2][4].append(\"max\")\n",
    "results[2][4].append(1e-18)\n",
    "results[2][4].append(eserror(results[2][4][2], results[2][4][4]))\n",
    "print(*results[2][4])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4 функция"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1453,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f4_opt_newt 0.513417119032592 0.0 4 1e-14 0.0\n"
     ]
    }
   ],
   "source": [
    "of = optimize.newton(f4, 0.5, fprime = df4, tol=1e-14, maxiter=4)\n",
    "results[3].append([])\n",
    "results[3][1].append(\"f4_opt_newt\")\n",
    "results[3][1].append(of)\n",
    "results[3][1].append(f4(of))\n",
    "results[3][1].append(4)\n",
    "results[3][1].append(1e-14)\n",
    "results[3][1].append(eserror(results[3][1][2], results[3][1][4]))\n",
    "print(*results[3][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1454,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f4_opt_fsol 0.513417118632748 -7.78789921440648e-10 4 1e-14 7787899.21440648 RuntimeWarning\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\Anaconda\\lib\\site-packages\\scipy\\optimize\\minpack.py:162: RuntimeWarning: The number of calls to function has reached maxfev = 4.\n",
      "  warnings.warn(msg, RuntimeWarning)\n"
     ]
    }
   ],
   "source": [
    "of = optimize.fsolve(f4,0.5 , fprime = df4, xtol = 1e-14, maxfev = 4)\n",
    "results[3].append([])\n",
    "results[3][2].append(\"f4_opt_fsol\")\n",
    "results[3][2].append(of[0])\n",
    "results[3][2].append(f4(of[0]))\n",
    "results[3][2].append(4)\n",
    "results[3][2].append(1e-14)\n",
    "results[3][2].append(eserror(results[3][2][2], results[3][2][4]))\n",
    "results[3][2].append(\"RuntimeWarning\")\n",
    "print(*results[3][2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1455,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f4_opt_fsol 0.513417119032592 0.0 max 1e-14 0.0\n"
     ]
    }
   ],
   "source": [
    "of = optimize.fsolve(f4,0.5 , fprime = df4, xtol = 1e-14)\n",
    "results[3].append([])\n",
    "results[3][3].append(\"f4_opt_fsol\")\n",
    "results[3][3].append(of[0])\n",
    "results[3][3].append(f4(of[0]))\n",
    "results[3][3].append(\"max\")\n",
    "results[3][3].append(1e-14)\n",
    "results[3][3].append(eserror(results[3][3][2], results[3][3][4]))\n",
    "print(*results[3][3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5 функция\n",
    "Помним, что ее очень плохо обрабатывает метод Ньютона. Проверяем без всяких ограничений:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1456,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RuntimeError\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    of = optimize.newton(f5, 2.5, fprime = df5)\n",
    "except RuntimeError:\n",
    "    print(\"RuntimeError\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "И да, функция не справляется с задачей. Сохраняем значения как err"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1457,
   "metadata": {},
   "outputs": [],
   "source": [
    "results[4].append([])\n",
    "results[4][1].append(\"f5_opt_newt\")\n",
    "results[4][1].append(\"err\")\n",
    "results[4][1].append(\"err\")\n",
    "results[4][1].append(\"err\")\n",
    "results[4][1].append(\"err\")\n",
    "results[4][1].append(\"err\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1458,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f5_opt_fsol 2.0 0.0 max 1e-15 0.0\n"
     ]
    }
   ],
   "source": [
    "of = optimize.fsolve(f5,2.5 , fprime = df5, xtol = 1e-15)\n",
    "results[4].append([])\n",
    "results[4][2].append(\"f5_opt_fsol\")\n",
    "results[4][2].append(of[0])\n",
    "results[4][2].append(f5(of[0]))\n",
    "results[4][2].append(\"max\")\n",
    "results[4][2].append(1e-15)\n",
    "results[4][2].append(eserror(results[4][2][2], results[4][2][4]))\n",
    "print(*results[4][2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6 функция"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1459,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RuntimeError\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    of = optimize.newton(f6, 2.5, fprime = df6, tol=1e-15, maxiter=6)\n",
    "except RuntimeError:\n",
    "    print(\"RuntimeError\")\n",
    "    results[5].append([])\n",
    "    results[5][1].append(\"f6_opt_newt\")\n",
    "    results[5][1].append(\"err\")\n",
    "    results[5][1].append(\"err\")\n",
    "    results[5][1].append(6)\n",
    "    results[5][1].append(1e-15)\n",
    "    results[5][1].append(\"err\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5 итераций не хватает. Убираем ограничение по итерациям"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1460,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f6_opt_newt 1.7320508075688767 0.0 max 1e-15 0.0\n"
     ]
    }
   ],
   "source": [
    "of = optimize.newton(f6, 2.5, fprime = df6, tol=1e-15)\n",
    "results[5].append([])\n",
    "results[5][2].append(\"f6_opt_newt\")\n",
    "results[5][2].append(of)\n",
    "results[5][2].append(f6(of))\n",
    "results[5][2].append(\"max\")\n",
    "results[5][2].append(1e-15)\n",
    "results[5][2].append(eserror(results[5][2][2], results[5][2][4]))\n",
    "print(*results[5][2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1461,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f6_opt_fsol 1.732052686429832 4.697148565657727e-07 6 1e-15 46971485656.57727 RuntimeWarning\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\Anaconda\\lib\\site-packages\\scipy\\optimize\\minpack.py:162: RuntimeWarning: The number of calls to function has reached maxfev = 6.\n",
      "  warnings.warn(msg, RuntimeWarning)\n"
     ]
    }
   ],
   "source": [
    "of = optimize.fsolve(f6,2.5 , fprime = df6, xtol = 1e-15, maxfev = 6)\n",
    "results[5].append([])\n",
    "results[5][3].append(\"f6_opt_fsol\")\n",
    "results[5][3].append(of[0])\n",
    "results[5][3].append(f6(of[0]))\n",
    "results[5][3].append(6)\n",
    "results[5][3].append(1e-15)\n",
    "results[5][3].append(eserror(results[5][3][2], results[5][3][4]))\n",
    "results[5][3].append(\"RuntimeWarning\")\n",
    "print(*results[5][3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1462,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f6_opt_fsol 1.7320508075688772 0.0 max 1e-15 0.0\n"
     ]
    }
   ],
   "source": [
    "of = optimize.fsolve(f6,2.5 , fprime = df6, xtol = 1e-15)\n",
    "results[5].append([])\n",
    "results[5][4].append(\"f6_opt_fsol\")\n",
    "results[5][4].append(of[0])\n",
    "results[5][4].append(f6(of[0]))\n",
    "results[5][4].append(\"max\")\n",
    "results[5][4].append(1e-15)\n",
    "results[5][4].append(eserror(results[5][4][2], results[5][4][4]))\n",
    "print(*results[5][4])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 7 функция\n",
    "Помним, что на данном отрезке локализации функция принимает значения, довольно далекие от нуля. Это значит, что нужно придется увеличивать e (tol для optimize.newton)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1463,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RuntimeError\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    of = optimize.newton(f7, 2.5, fprime = df7, tol=0.389655335, maxiter = 3)\n",
    "except RuntimeError:\n",
    "    print(\"RuntimeError\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Получаем ошибку. Пробуем убрать ограничение итераций"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1464,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RuntimeError\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    of = optimize.newton(f7, 2.5, fprime = df7, tol=0.389655335)\n",
    "except RuntimeError:\n",
    "    print(\"RuntimeError\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Снова получаем ошибку. Увеличиваем границу tol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1465,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f7_opt_newt 1.8584073464102069 -0.7793106688526371 3 0.7 111.33009555037674\n"
     ]
    }
   ],
   "source": [
    "of = optimize.newton(f7, 2.5, fprime = df7, tol=0.7, maxiter = 3)\n",
    "results[6].append([])\n",
    "results[6][1].append(\"f7_opt_newt\")\n",
    "results[6][1].append(of)\n",
    "results[6][1].append(f7(of))\n",
    "results[6][1].append(3)\n",
    "results[6][1].append(0.7)\n",
    "results[6][1].append(eserror(results[6][1][2], results[6][1][4]))\n",
    "print(*results[6][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1466,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f7_opt_fsol 1.2168146928204138 -0.5195404459017581 3 0.389655335 133.33333313702946 RuntimeWarning\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\Anaconda\\lib\\site-packages\\scipy\\optimize\\minpack.py:162: RuntimeWarning: The number of calls to function has reached maxfev = 3.\n",
      "  warnings.warn(msg, RuntimeWarning)\n"
     ]
    }
   ],
   "source": [
    "of = optimize.fsolve(f7,2.5 , fprime = df7, xtol = 0.389655335, maxfev = 3)\n",
    "results[6].append([])\n",
    "results[6][2].append(\"f7_opt_fsol\")\n",
    "results[6][2].append(of[0])\n",
    "results[6][2].append(f7(of[0]))\n",
    "results[6][2].append(3)\n",
    "results[6][2].append(0.389655335)\n",
    "results[6][2].append(eserror(results[6][2][2], results[6][2][4]))\n",
    "results[6][2].append(\"RuntimeWarning\")\n",
    "print(*results[6][2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1467,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\Anaconda\\lib\\site-packages\\scipy\\optimize\\minpack.py:162: RuntimeWarning: The number of calls to function has reached maxfev = 200.\n",
      "  warnings.warn(msg, RuntimeWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "-2.9126618709948105e+41"
      ]
     },
     "execution_count": 1467,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "of = optimize.fsolve(f7,2.5 , fprime = df7, xtol = 0.389655335)\n",
    "of[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ответ выходит за границы отрезка локализации. Увеличиваем xtol, пока не зайдем в отрезок"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1468,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.8584073464102069"
      ]
     },
     "execution_count": 1468,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "of = optimize.fsolve(f7,2.5 , fprime = df7, xtol = 0.7)\n",
    "of[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сохраняем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1469,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f7_opt_fsol 1.8584073464102069 -0.7793106688526371 max 0.7 111.33009555037674\n"
     ]
    }
   ],
   "source": [
    "results[6].append([])\n",
    "results[6][3].append(\"f7_opt_fsol\")\n",
    "results[6][3].append(of[0])\n",
    "results[6][3].append(f7(of[0]))\n",
    "results[6][3].append(\"max\")\n",
    "results[6][3].append(0.7)\n",
    "results[6][3].append(eserror(results[6][3][2], results[6][3][4]))\n",
    "print(*results[6][3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Анализируем полученные результаты\n",
    "## !!!Количество итераций функций optimize < значения в таблице. Т.е. оно может быть <= n-1, где n - значение в таблице (скорее всего оно и равно n-1)!!!\n",
    "\n",
    "# 1 функция"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1470,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f1_mynewt\t2.0945514815423265\t-8.881784197001252e-16\t6\t1e-15\t88.81784197001251\n",
      "f1_opt_newt\t2.0945514815423265\t-8.881784197001252e-16\t7\t1e-15\t88.81784197001251\n",
      "f1_opt_fsol\t2.0945519788901694\t5.551118531066379e-06\t7\t1e-15\t555111853106.6378\tRuntimeWarning\n",
      "f1_opt_fsol\t2.0945514815423265\t-8.881784197001252e-16\tmax\t1e-15\t88.81784197001251\n"
     ]
    }
   ],
   "source": [
    "def printresults(mas):\n",
    "    for i in range(len(mas)):\n",
    "        print(*mas[i], sep = '\\t')\n",
    "printresults(results[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод: ответы функций сходятся при одинаковой точности кроме случая, когда в функции optimize.fsol количество итераций <7\n",
    "\n",
    "# 2 функция"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1471,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f2_mynewt\t3.141592653589793\t1.2246467991473532e-16\t4\t1e-15\t12.24646799147353\n",
      "f2_opt_newt\t3.141592653589793\t1.2246467991473532e-16\t5\t1e-15\t12.24646799147353\n",
      "f2_opt_fsol\t3.141592653517837\t7.195634122589542e-11\t5\t1e-15\t7195634.122589541\tRuntimeWarning\n",
      "f2_opt_fsol\t3.141592653589793\t1.2246467991473532e-16\tmax\t1e-15\t12.24646799147353\n"
     ]
    }
   ],
   "source": [
    "printresults(results[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Тот же вывод, что и у функции 1\n",
    "\n",
    "# 3 функция"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1472,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f3_mynewt\t0.1\t2.168404344971009e-19\t13\t1e-18\t21.684043449710085\n",
      "f3_opt_newt\terr\terr\t10\t1e-18\terr\n",
      "f3_opt_newt\t0.09999999999999999\t-2.168404344971009e-19\t14\t1e-16\t0.2168404344971009\n",
      "f3_opt_fsol\t0.051718477053988535\t-0.0008616633726438093\t14\t1e-18\t8.616633726438093e+16\tRuntimeWarning\n",
      "f3_opt_fsol\t0.09999999999999999\t-2.168404344971009e-19\tmax\t1e-18\t21.684043449710085\n"
     ]
    }
   ],
   "source": [
    "printresults(results[2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод: \n",
    "### 1) optimize.newton не справляется с точностью, с которой справляется mynewton\n",
    "### 2) optimize.newton при <= количестве итераций приходится уменьшать точность\n",
    "### 3) optimize.fscale требует большего количества итераций, чем метод Ньютона\n",
    "\n",
    "# 4 функция"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1473,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f4_mynewt\t0.5134171190325911\t-1.7763568394002505e-15\t3\t1e-14\t17.763568394002505\n",
      "f4_opt_newt\t0.513417119032592\t0.0\t4\t1e-14\t0.0\n",
      "f4_opt_fsol\t0.513417118632748\t-7.78789921440648e-10\t4\t1e-14\t7787899.21440648\tRuntimeWarning\n",
      "f4_opt_fsol\t0.513417119032592\t0.0\tmax\t1e-14\t0.0\n"
     ]
    }
   ],
   "source": [
    "printresults(results[3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод: \n",
    "### 1) optimize.newton и  optimize.fscale показали большую точность, чем mynewton\n",
    "### 2) optimize.fscale требует большего количества итераций, чем метод Ньютона\n",
    "\n",
    "# 5 функция"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1474,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f5_mynewt\t2.5\t0.7071067811865476\t0\t0.8\t88.38834764831844\n",
      "f5_opt_newt\terr\terr\terr\terr\terr\n",
      "f5_opt_fsol\t2.0\t0.0\tmax\t1e-15\t0.0\n"
     ]
    }
   ],
   "source": [
    "printresults(results[4])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод: метод Ньютона не может нормально обработать данную функцию, но optimize.fscale справляется без проблем\n",
    "\n",
    "# 6 функция"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1475,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f6_mynewt\t1.732050807568875\t-4.440892098500626e-16\t5\t1e-15\t44.408920985006255\n",
      "f6_opt_newt\terr\terr\t6\t1e-15\terr\n",
      "f6_opt_newt\t1.7320508075688767\t0.0\tmax\t1e-15\t0.0\n",
      "f6_opt_fsol\t1.732052686429832\t4.697148565657727e-07\t6\t1e-15\t46971485656.57727\tRuntimeWarning\n",
      "f6_opt_fsol\t1.7320508075688772\t0.0\tmax\t1e-15\t0.0\n"
     ]
    }
   ],
   "source": [
    "printresults(results[5])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод: \n",
    "### 1) optimize.newton требует большего количества итераций, чем mynewton\n",
    "### 2) optimize.fscale требует большего количества итераций, чем метод Ньютона\n",
    "### 3) И optimize.newton, и optimize.fscale показали лучшую точность по сравнению с mynewton\n",
    "\n",
    "# 7 функция"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1476,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f7_mynewt\t0.5752220392306207\t-0.38965533442631856\t2\t0.389655335\t99.99999985277208\n",
      "f7_opt_newt\t1.8584073464102069\t-0.7793106688526371\t3\t0.7\t111.33009555037674\n",
      "f7_opt_fsol\t1.2168146928204138\t-0.5195404459017581\t3\t0.389655335\t133.33333313702946\tRuntimeWarning\n",
      "f7_opt_fsol\t1.8584073464102069\t-0.7793106688526371\tmax\t0.7\t111.33009555037674\n"
     ]
    }
   ],
   "source": [
    "printresults(results[6])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод: \n",
    "### 1) mynewton выводит более точный результат, чем optimize.newton и optimize.fscale\n",
    "### 2) все функции показывают плохую эффективность по причине того, что на данном отрезке локализации функция принимает значения, далекие от 0\n",
    "### 3) optimize.newton требует большего количества итераций, чем mynewton"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Итог:\n",
    "\n",
    "## optimize.fscale требует большего количества итераций, чем метод Ньютона\n",
    "## Метод Ньютона кране неэффективен на функциях, чьи произвотные в точке ответа стремятся к бесконечности\n",
    "## функции, значения которых на данных отрезках локализаций далеки от нуля, плохо обрабатываются всеми тремя данными методами "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
